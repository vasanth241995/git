#! /usr/bin/env groovy

@Library('cm-cicd-pipeline-library@multikube-azure') _
String ParamFile = 'params.yaml', branchName, buildno, deployment, stagelog, mavenlog, testlog, ArtifactUrl,
       ArtifactoryURL, BlackDuckUrl, BlackDuckProjectName, BlackDuckProjectVersion, BlackDuckCreds, BlackDuckDetectUrl, 
       VeracodeAppName, VeracodeCreds, VeracodeSandbox, ProxyHost, ProxyPort, emailid
Boolean isCheckout, isBuild, isVeracode, isBlackduck, isSonar, isDeploy, isTest, isDeployQC, isDeployDev

properties([disableConcurrentBuilds(), buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '10')),
            parameters([
                        booleanParam(defaultValue: true, name: 'Checkout'),
                        booleanParam(defaultValue: true, name: 'Build'),
                        booleanParam(defaultValue: true, name: 'Blackduck'),
                        booleanParam(defaultValue: true, name: 'Veracode'),
                        booleanParam(defaultValue: true, name: 'Sonar'),
                        booleanParam(defaultValue: true, name: 'DeployDev'),
                        booleanParam(defaultValue: true, name: 'DeployQC')
            ]
            )
            ])

def label = "trillium-api-${env.BRANCH_NAME}".replaceAll('-', '_').replaceAll('/', '_').replaceAll(' ', '_') + "_label"
def cloudId = 'ds-cicd'
def namespace = 'ds-cicd'
def workingdir = "/home/jenkins"
def mavenImg = "ds-docker-dev.docker.fis.dev/maven:3.8.3-openjdk-17"
def images = [jnlp:"ds-docker-dev.docker.fis.dev/base-images/base-jenkins-client:1.0.4"]
def stages = [:]

milestone()
try {
  
	timestamps {
        images << [maven:mavenImg, mavenCpuLmt:"2", mavenMemLmt:"4Gi"]  
        slaveTemplate = new PodTemplates(cloudId, namespace, label, images, workingdir, this)
        echo "Container images: ${images}"
        echo "running agents on node with label ${label}"
        slaveTemplate.BuilderTemplate {
            node(slaveTemplate.podlabel) {
                stage("Read Parameters") { // Stage to read parameters.
                   checkout scm // default checkout to read paramters yaml file
                   def datas = readYaml file: "./${ParamFile}"
                   branchName = "${env.BRANCH_NAME}"
                   jobname = "${env.JOB_NAME}"
                   buildno = "${env.BUILD_NUMBER}"
                   deployment = datas.vars.deployment
                   ArtifactoryURL = datas.vars.ArtifactoryURL
                   BlackDuckUrl = datas.blackduck.url
                   BlackDuckProjectName = datas.blackduck.project_name
                   BlackDuckCreds = datas.blackduck.credentials
                   BlackDuckProjectVersion = datas.blackduck.project_version
                   BlackDuckDetectUrl = datas.blackduck.detect_url
                   VeracodeAppName = datas.veracode.application_name
                   VeracodeCreds = datas.veracode.credentials
                   VeracodeSandbox = datas.veracode.sandbox_name
                   ProxyHost = datas.vars.proxy_host
                   ProxyPort = datas.vars.proxy_port
                   SonarQubeCreds = datas.sonar.credentials
                   isCheckout = datas.stages.checkout
                   isBuild = datas.stages.build
                   isBlackduck = datas.stages.blackduck
                   isVeracode = datas.stages.veracode
                   isSonar = datas.stages.sonar
                   isDeployDev = datas.stages.deploy_dev
                   isDeployQC = datas.stages.deploy_qc
                   isTest = datas.stages.test
                   emailid = datas.vars.emailid
                  if ( params.Checkout || params.Build || params.Blackduck || params.Veracode || params.Sonar || params.DeployDev || params.DeployQC)
                   {
                        isCheckout = params.Checkout
                        isBuild = params.Build
                        isBlackduck = params.Blackduck
                        isVeracode = params.Veracode
                        isSonar = params.Sonar
                        isDeployDev = params.DeployDev
                        isDeployQC = params.DeployQC

                   }
                   else {
                        isCheckout = datas.stages.checkout
                        isBuild = datas.stages.build
                        isBlackduck = datas.stages.blackduck
                        isVeracode = datas.stages.veracode
                        isSonar = datas.stages.sonar
                        isDeployDev = datas.stages.deploy_dev
                        isDeployQC = datas.stages.deploy_qc
                   }
                }
                if ( isCheckout ) {
                  stage("Checkout") {
                    try {
                        cleanWs()
                        checkout scm
                    }
                    catch (e) {
                        currentBuild.result = "ABORTED"
                        def latestcommitHash = sh(script: "git rev-parse origin/${branchName}", returnStdout: true).trim()
                        println "Latest commit hash: ${latestcommitHash}"
                        error('!!!! Git commit hash code differs cannot continue with build !!!!')
                    }
                  }
                }

                container('maven') {
                if ( isBuild ) {
                 stage ("Build") {
                    milestone()
                        if (readMavenPom().version.contains("SNAPSHOT")) {
                            deployment = "snapshot"
                        } else {
                            deployment = "release"
                        }

                        if (branchName == "${env.BRANCH_NAME}") {
                           sh "mvn -Djasypt.encryptor.password=TRILLIUM_JASYPT_TOKEN -V -U -B -f pom.xml clean deploy -Dmaven.test.skip=true"
                        }
                        else {
                            sh "mvn -Djasypt.encryptor.password=TRILLIUM_JASYPT_TOKEN -V -U -B -f pom.xml clean deploy"
                        }
                    }
                }
                    //----------------------------------------------------------------Black duck Scan
                    if ( isBlackduck ) {
                     stages ["BlackDuckScan"] = {
                       stage("BlackDuckScan") {
                        echo "In Blackduck stage"
                        sh "curl ${BlackDuckDetectUrl} -o ${workingdir}/synopsys-detect-7.0.0.jar"
                        withCredentials([string(credentialsId: "${BlackDuckCreds}", variable: 'blackducktoken')]) {
                        sh """
                        java -jar ${workingdir}/synopsys-detect-7.0.0.jar \
                        --detect.source.path=${WORKSPACE} \
                        --detect.project.name=${BlackDuckProjectName} \
                        --detect.project.version.name=${BlackDuckProjectVersion} \
                        --logging.level.com.blackducksoftware.integration=DEBUG \
                        --blackduck.url=${BlackDuckUrl}/ \
                        --blackduck.api.token=${blackducktoken}
                        """
                        sh "rm -rf /home/jenkins/synopsys-detect-7.0.0.jar"
                        }
                        }     
                        }    
                        }
                   if ( isVeracode ) {
                     stages ["Veracode"] = {
                       stage("VeracodeScan") {
                          echo 'In Veracode stage'
                          withCredentials([usernamePassword(credentialsId: "${VeracodeCreds}",
                          usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                            veracode applicationName: "${VeracodeAppName}", 
                            canFailJob: true, 
                            criticality: 'VeryHigh', 
                            fileNamePattern: '', 
                            pHost: "${ProxyHost}", 
                            pPassword: '', 
                            pPort: "${ProxyPort}", 
                            pUser: '', 
                            replacementPattern: '', 
                            sandboxName: "${VeracodeSandbox}", 
                            scanExcludesPattern: '', 
                            scanIncludesPattern: '', 
                            scanName: 'Trillium-API_${JOB_BASE_NAME}_${BUILD_ID}', 
                            teams: '', uploadExcludesPattern: '**/BOOT-INF/lib/camel-support**.jar', 
                            uploadIncludesPattern: '**/**.jar,**/**.zip', 
                            useProxy: true,
                            useIDkey: true,
                            vid: "${USERNAME}", vkey: "${PASSWORD}",
                            vpassword: '', vuser: ''
                    }
                }
                     }
            }
                if ( isSonar ) {
                   stages ["sonar-scan"] = {
                    stage ("sonar-scan") {
                      withCredentials([string(credentialsId:  "${SonarQubeCreds}", variable: 'AUTH_TOKEN')]) {
                      echo "==============================================================================================="
                      echo "Sonar Scan started"
                        def pom = readMavenPom file: "pom.xml"
                        versionNumber = pom.version
                        echo "Sonar scan"
                        dir("${env.WORKSPACE}") {
                        withSonarQubeEnv('fis-sonarqube') {
                          sh """
                          mvn -V -f pom.xml sonar:sonar \
                          -Dsonar.branch.name=${env.BRANCH_NAME} \
                          -Dsonar.host.url=${SONAR_HOST_URL} \
                          -Dsonar.login=${AUTH_TOKEN} \
                          -DSONAR_USER_HOME=${env.WORKSPACE}
                          """
                                     }
                                   }
                                 }
                           }
               }  
             }   
             parallel(stages)
          }
        }
    }
   }
if ( isDeployDev || isDeployQC ) {
   node('ansible') {
            milestone()
            checkout scm
            if (readMavenPom().version.contains("SNAPSHOT")) {
                    deployment = "snapshot"
                } else {
                    deployment = "release"
                }
          if ( isDeployDev ) {
            stage("Deploy to DEV") {
            ansiblePlaybook(
                playbook: "playbook.yml",
                inventory: "hosts",
                limit: "DEV",
                credentialsId: "4b23ad30-ff47-492f-9eef-faa8a19466be",
                vaultCredentialsId: "1a3f9998-340e-43d1-bf10-02fa7442cad1",
                extraVars: [
                  deployment: deployment,
                  jobname: branchName,
                  buildno: buildno
                ]
            )
        }
      }

      if ( isDeployQC ) { 
        stage("Deploy to QC") {
            ansiblePlaybook(
                playbook: "playbook.yml",
                inventory: "hosts",
                limit: "QC",
                credentialsId: "4b23ad30-ff47-492f-9eef-faa8a19466be",
                vaultCredentialsId: "1a3f9998-340e-43d1-bf10-02fa7442cad1",
                extraVars: [
                  deployment: deployment,
                  jobname: branchName,
                  buildno: buildno
                ]
            )
        }
      }  
    }
}   
    
   }
catch(e) {
    currentBuild.result = "FAILED"
    echo 'BUILD FAILED'
    throw e
} 
finally {
    buildNotification {
        emailId = "${emailid}"
        echo "Finshed!"
    }
}
